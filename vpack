#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import getopt
import ipaddress

sys.path.append(".")
import util


def _help():
    msg = """usage: vpack [option] filename

  Compression and extraction.

option:
  -c/--compress [algorithm]         pack directory/file with algorithm, by default
                                    generate .tar.gz package
  -e/--extract                      unpack packaged file with detected algorithm

  -h/--help                         show help message

algorithm:
  targz                             .tar.gz file
  tgz                               .tar.gz file
  tarbz2                            .tar.bz2 file
  tar                               .tar file
  zip                               .zip file
  7z                                .7z file

example:
  $ vpack -e Hack-v3.003-ttf.zip
  Archive:  Hack-v3.003-ttf.zip
    inflating: ttf/Hack-Bold.ttf
    inflating: ttf/Hack-BoldItalic.ttf
    inflating: ttf/Hack-Italic.ttf
    inflating: ttf/Hack-Regular.ttf

  $ vpack -c package
  a package
  a package/test.log
  a package/test3.log
  a package/test2.log
"""
    print(msg)
    exit(0)


def _compress(filename, option):
    if option == "targz" or option == "tgz":
        target = "%s.tar.gz" % filename
        util.backup_file(target)
        os.system('tar czvf "%s" "%s"' % (target, filename))
    elif option == "tarbz2":
        target = "%s.tar.bz2" % filename
        util.backup_file(target)
        os.system('tar czvf "%s" "%s"' % (target, filename))
    elif option == "tar":
        target = "%s.tar" % filename
        util.backup_file(target)
        os.system('tar cvf "%s" "%s"' % (target, filename))
    elif option == "zip":
        target = "%s.zip" % filename
        util.backup_file(target)
        os.system('zip -r "%s" "%s"' % (target, filename))
    else:
        print("error: compress option %s not support" % (option))
    exit(0)


def _extract(filename):
    if filename.endswith(".tar.gz") or filename.endswith(".tgz"):
        os.system('tar zxvf "%s"' % (filename))
    elif filename.endswith(".tar.bz2"):
        os.system('tar xvf "%s"' % (filename))
    elif filename.endswith(".tar"):
        os.system('tar xvf "%s"' % (filename))
    elif filename.endswith(".zip"):
        os.system('unzip "%s"' % (filename))
    elif filename.endswith(".7z"):
        os.system('7z x "%s"' % (filename))
    elif filename.endswith(".jar"):
        os.system('jar xf "%s"' % (filename))
    else:
        print("error: file %s extraction not support" % (filename))
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(
            sys.argv[1:],
            "c:eh",
            [
                "compress=",
                "extract=",
                "help",
            ],
        )
        for opt in opts:
            if opt[0] in ("-h", "--help"):
                _help()
        for opt in opts:
            if opt[0] in ("-c", "--compress"):
                algorithm = "targz"
                filename = None
                if len(args) > 0:
                    algorithm = opt[1]
                    filename = args[0]
                else:
                    filename = opt[1]
                _compress(filename, algorithm)
            elif opt[0] in ("-e", "--extract"):
                _extract(args[0])
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
