#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import util
import sys
import os
import click

sys.path.append(".")

SLASH = "\\" if util.is_windows() else "/"
PROXY_DB = util.get_command_home() + SLASH + "proxy.db"
GIT_CONFIG = os.path.expanduser("~") + SLASH + ".gitconfig"


def add_proxy(args, debug):
    if debug:
        print(f"[dotfiles] add proxy:{args}")
    if len(args) != 1:
        print(
            "[dotfiles] please provide proxy in `name=protocol://ip:port` format"
        )
        return
    util.append_file(PROXY_DB, f"{args[0]}\n")
    print(f"[dotfiles] add ip proxy: {args[0]}")


def erase_proxy(name, debug):
    if debug:
        print(f"[dotfiles] remove ip proxy:{name}")
    proxies = util.read_file_by_lines(PROXY_DB)
    proxies = [p.strip() for p in proxies if p and len(p.strip()) > 0]
    saved_proxies = []
    for p in proxies:
        if p.strip().startswith(name):
            print(f"[dotfiles] remove proxy - {p.strip()}")
            continue
        saved_proxies.append(p.strip() + "\n")
    util.write_file(PROXY_DB, saved_proxies)


def listing_proxy(debug):
    proxies = util.read_file_by_lines(PROXY_DB)
    proxies = [p.strip() for p in proxies if p and len(p.strip()) > 0]
    if debug:
        print(f"{GIT_CONFIG}:{proxies}")
    n = 0
    if proxies and len(proxies) > 0:
        print("[dotfiles] stored ip proxy:")
        for i, p in enumerate(proxies):
            print(f"[dotfiles]   {i} - {p.strip()}")
            n += 1
    else:
        print("[dotfiles] stored ip proxy - empty")


def show_git_proxy(debug):
    configs = util.read_file_by_lines(GIT_CONFIG)
    if debug:
        print(f"{GIT_CONFIG}:{configs}")

    current = None
    title = None

    proxies = []
    if configs:
        for i, line in enumerate(configs):
            current = line.strip()
            if debug:
                print(
                    f"the {i}-th line:{current}, title:{title}, startswith proxy:{current.startswith('proxy')}"
                )
            if len(current) == 0:
                continue
            if current.startswith("[") and current.endswith("]"):
                title = current
            elif current.startswith("proxy") and isinstance(
                    title, str) and title.lower().startswith("[http"):
                proxies.append(f"{title}={current.split('=')[-1].strip()}")
    if len(proxies) > 0:
        print(f"[dotfiles] git proxy:")
        for i, p in enumerate(proxies):
            print(f"[dotfiles]   {i} - {p}")
    else:
        print("[dotfiles] git proxy - empty")


def show_environment_proxy(debug):
    if debug:
        print(f"OS platform is windows:{util.is_windows()}")

    print(f"[dotfiles] environment proxy:")
    if util.is_windows():
        print(f"[dotfiles]   0 - %HTTP_PROXY%: {os.environ['HTTP_PROXY']}")
        print(f"[dotfiles]   1 - %HTTPS_PROXY%: {os.environ['HTTPS_PROXY']}")
    else:
        print(f"[dotfiles]   0 - $http_proxy: {os.environ['http_proxy']}")
        print(f"[dotfiles]   1 - $https_proxy: {os.environ['https_proxy']}")


def show_proxy(debug):
    show_git_proxy(debug)
    show_environment_proxy(debug)


def reset_git_proxy():
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")


def find_proxy_by_name(name, debug):
    proxies = util.read_file_by_lines(PROXY_DB)
    proxies = [p.strip() for p in proxies if p and len(p.strip()) > 0]
    if debug:
        print(f"[dotfiles] {PROXY_DB}:{proxies}")
    if proxies is None or len(proxies) == 0:
        return None
    for p in proxies:
        ps = [x.strip() for x in p.split("=")]
        if ps[0] == name.strip():
            return ps
    return None


def set_git_proxy(name, debug):
    proxy = find_proxy_by_name(name, debug)
    if proxy is None or len(proxy) == 0:
        print(f"[dotfiles] ip proxy:{name} not found, exit...")
        return
    os.system("git config --global --unset https.proxy")
    os.system("git config --global --unset http.proxy")
    httpcmd = f"git config --global http.proxy {proxy[1]}"
    httpscmd = f"git config --global https.proxy {proxy[1]}"
    os.system(httpcmd)
    os.system(httpscmd)
    print(f"[dotfiles] set git proxy:{proxy}")


def clear_proxy():
    util.purge_file(PROXY_DB)


def print_shell_proxy(name, debug):
    proxy = find_proxy_by_name(name, debug)
    if proxy is None or len(proxy) == 0:
        print(f"[dotfiles] ip proxy:{name} not found, exit...")
        return
    print(f"[dotfiles] export http_proxy={proxy[1]} https_proxy={proxy[1]}")


def print_powershell_proxy(name, debug):
    proxy = find_proxy_by_name(name, debug)
    if proxy is None or len(proxy) == 0:
        print(f"[dotfiles] ip proxy:{name} not found, exit...")
        return
    print(f"[dotfiles] $env:HTTP_PROXY=\"{proxy[1]}\"")
    print(f"[dotfiles] $env:HTTPS_PROXY=\"{proxy[1]}\"")


def print_cmd_proxy(name, debug):
    proxy = find_proxy_by_name(name, debug)
    if proxy is None or len(proxy) == 0:
        print(f"[dotfiles] ip proxy:{name} not found, exit...")
        return
    print(f"[dotfiles] set HTTP_PROXY=\"{proxy[1]}\"")
    print(f"[dotfiles] set HTTPS_PROXY=\"{proxy[1]}\"")


@click.command()
@click.option("-a",
              "--add",
              is_flag=True,
              help="add proxy in `name=protocol://ip:port` format")
@click.option("-l", "--list", "listing", is_flag=True, help="list all proxies")
@click.option("--show", is_flag=True, help="show current environment proxies")
@click.option("--clear", is_flag=True, help="clear all proxies")
@click.option("-e", "--erase", help="erase proxy by name")
@click.option("-s", "--set-git", 'set_git', help="set git proxy")
@click.option("-r",
              "--reset-git",
              'reset_git',
              is_flag=True,
              help="disable git proxy")
@click.option("--shell", help="print linux shell proxy environment")
@click.option("--powershell",
              help="print windows powershell proxy environment")
@click.option("--cmd", help="print windows cmd proxy environment")
@click.option("--debug", is_flag=True, help="debug mode")
@click.argument("args", nargs=-1)
def vproxy(add, listing, show, erase, clear, set_git, reset_git, shell,
           powershell, cmd, debug, args):
    """ Proxy management """
    if debug:
        print(f"args:{args}, type:{type(args)}")
    if add:
        add_proxy(args, debug)
    elif listing:
        listing_proxy(debug)
    elif show:
        show_proxy(debug)
    elif clear:
        clear_proxy()
    elif erase:
        erase_proxy(erase, debug)
    elif set_git:
        set_git_proxy(set_git, debug)
    elif reset_git:
        reset_git_proxy()
    elif shell:
        print_shell_proxy(shell, debug)
    elif powershell:
        print_powershell_proxy(powershell, debug)
    elif cmd:
        print_cmd_proxy(cmd, debug)
    else:
        print(
            "[dotfiles] unknown option, please try `vproxy --help` for more information"
        )


if __name__ == "__main__":
    vproxy()
