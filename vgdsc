#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import util
import sys
import os
import datetime
import click

sys.path.append(".")


def branch_show(opt):
    util.check_git_repository()
    outs = []
    if opt.startswith("a"):
        outs, _ = util.run("git", "branch", "-a")
    elif opt.startswith("l"):
        outs, _ = util.run("git", "branch")
    elif opt.startswith("r"):
        outs, _ = util.run("git", "branch", "-r")
    elif opt.startswith("t"):
        outs, _ = util.run("git", "rev-parse", "--abbrev-ref", "HEAD")
    for o in outs:
        print(o.strip())


def branch_create(name):
    util.check_git_repository()
    os.system("git checkout -b %s" % (name))


def branch_switch(name):
    util.check_git_repository()
    os.system("git checkout %s" % (name))


def branch_delete(name):
    util.check_git_repository()
    os.system("git branch -d %s" % (name))


def vgit_pull(force, debug):
    util.check_git_repository()
    remote_count = util.get_git_remote_repository_count()
    if remote_count <= 0:
        print("[vcmd] remote git repository not exist")
        return
    repo = util.get_git_remote_repository()
    branch = util.get_git_remote_branch()
    print(f"[vcmd] git pull from {repo}/{branch}")
    os.system("git fetch")
    os.system(f"git pull {'--force' if force else ''} {repo} {branch}")


def vgit_push(force, debug):
    util.check_git_repository()
    remote_count = util.get_git_remote_repository_count()
    if remote_count <= 0:
        print("[vcmd] remote git repository not exist")
        return
    repo = util.get_git_remote_repository()
    branch = util.get_git_remote_branch()
    comment = input("[vcmd] enter comment: ")
    if util.str_empty(comment):
        comment = f"[vcmd] git push at {(datetime.datetime.now().strftime('%Y/%m/%d %H:%M:%S'))}"
    else:
        comment = f"[vcmd] git push with {comment.strip()}"
    util.check_user_confirm(
        f"[vcmd] git push to {repo}/{branch} with '{comment}', yes? ")
    os.chdir(util.get_git_root())
    os.system("git add -A .")
    os.system(f'git commit -m "{comment}"')
    os.system(f"git push {'--force' if force else ''} {repo} {branch}")


def vgit_discard(debug):
    util.check_git_repository()
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    modifies = util.get_git_modified_files()
    untracts = util.get_git_untract_files()
    file_list = modifies + untracts
    for i in file_list:
        if i in modifies:
            print("[vcmd] discard: %s" % (i + " "))
            os.system("git checkout %s" % (i + " "))
        elif i in untracts:
            print("[vcmd] remove: %s" % (i + " "))
            os.system("rm %s" % (i + " "))
    if os.path.exists(save_dir):
        os.chdir(save_dir)


def vgit_revert(n):
    util.check_git_repository()
    branch = util.get_git_current_branch()
    commit = util.get_git_last_commit(n - 1)
    util.check_user_confirm(
        "[vcmd] git revert to last '%d' commits '%s' on '%s', yes? " %
        (n, commit, branch))
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    os.system("git revert %s" % commit)
    if os.path.exists(save_dir):
        os.chdir(save_dir)


def vgit_reset(n):
    util.check_git_repository()
    branch = util.get_git_current_branch()
    commit = util.get_git_last_commit(n - 1)
    util.check_user_confirm(
        "[vcmd] git revert to last '%d' commits '%s' on '%s', yes? " %
        (n, commit, branch))
    save_dir = os.getcwd()
    os.chdir(util.get_git_root())
    os.system("git reset HEAD~%d" % n)
    if os.path.exists(save_dir):
        os.chdir(save_dir)


def vgit_branch(branch, args, debug):
    if branch in ("local", "remote", "all", "this"):
        branch_show(branch)
    elif branch == "create":
        if len(args) != 1:
            print("[vcmd] please provide branch name")
            return
        branch_create(args[0])
    elif branch == "switch":
        if len(args) != 1:
            print("[vcmd] please provide branch name")
            return
        branch_switch(args[0])
    elif branch == "delete":
        if len(args) != 1:
            print("[vcmd] please provide branch name")
            return
        branch_delete(args[0])
    else:
        print(
            f"[vcmd] unknown option:{branch}, please try `vgit --help` for more information"
        )


@click.command()
@click.option(
    "-b",
    "--branch",
    type=click.Choice(
        ["local", "remote", "all", "this", "create", "switch", "delete"]),
    help=
    "branch operations, use `local/remote/all/this` to display local/remote/all branches, use `create/move/delete` to create/switch/delete with branches",
)
@click.option("-pl",
              "--pull",
              is_flag=True,
              help="pull, use --force to pull force")
@click.option("-ps",
              "--push",
              is_flag=True,
              help="push, use --force to push force")
@click.option("-f", "--force", is_flag=True, help="pull/push force")
@click.option("-d", "--discard", is_flag=True, help="discard local changes")
@click.option(
    "--reset",
    type=int,
    required=False,
    help=
    "reset N previous commits(you need to push force to override remote repository)",
)
@click.option(
    "--revert",
    type=int,
    required=False,
    help="revert N previous commits(use new commit instead of push force)")
@click.option("--debug", is_flag=True, help="debug mode")
@click.argument("args", nargs=-1)
def vgit(branch, pull, push, force, discard, reset, revert, debug, args):
    """
Dummy UI for git

Example:

\b
```
$ vgit -ps
[vcmd] choose remote repository 'origin'[0] (by default 0):
[vcmd] choose branch (by default master):
[vcmd] enter comment: test vgit -ps
[vcmd] git push to origin/master with '[vcmd] git push at test vgit -ps', yes? Y
[master 0995109] [vcmd] git push at test vgit -ps
 2 files changed, 80 insertions(+), 42 deletions(-)
Enumerating objects: 9, done.
Counting objects: 100% (9/9), done.
Delta compression using up to 12 threads
Compressing objects: 100% (5/5), done.
Writing objects: 100% (5/5), 2.21 KiB | 1.10 MiB/s, done.
Total 5 (delta 4), reused 0 (delta 0)
remote: Resolving deltas: 100% (4/4), completed with 4 local objects.
To https://github.com/linrongbin16/lin.vim
   9ff7a14..0995109  master -> master
```
    """
    if debug:
        print(f"args:{args}, type:{type(args)}")
    if branch:
        vgit_branch(branch, args, debug)
    else:
        if pull:
            vgit_pull(force, debug)
        elif push:
            vgit_push(force, debug)
        elif discard:
            vgit_discard(debug)
        elif reset:
            if reset < 1:
                print(f"[vcmd] invalid N:{reset}")
                return
            vgit_reset(reset)
        elif revert:
            if revert < 1:
                print(f"[vcmd] invalid N:{revert}")
                return
            vgit_revert(revert)
        else:
            print(
                "[vcmd] unknown option, please try `vgit --help` for more information"
            )


if __name__ == "__main__":
    vgit()

