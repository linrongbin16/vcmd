#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import time
import click

sys.path.append(".")
import common.sys as csys
import common.msg as cmsg
import common.fs as cfs


def delete_by_ftype(filetype):
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in cfs.list_files(".")]
    filetype = f".{filetype}"
    for f in files:
        if f.endswith(filetype):
            cmsg.echo(f"remove => {f}")
            os.remove(f)


def list_by_ftype(filetype):
    root = os.getcwd()
    files = [os.path.relpath(f, root) for f in cfs.list_files(".")]
    filetype = f".{filetype}"
    for f in files:
        if f.endswith(filetype):
            cmsg.echo(os.path.relpath(f, root))


def get_encoding(outs):
    ec = "".join(outs).strip().split(":")[1]
    if ec.find("no result") >= 0:
        return None
    ec = ec.strip().split(" ")[0]
    return ec


def get_files(files):
    if len(files) == 0:
        root = os.getcwd()
        files = [os.path.relpath(f, root) for f in cfs.list_files(".")]
    return files


def convert_file_encoding(target_encoding, files):
    target_encoding = target_encoding.upper()
    encoding_name_map = {"UTF-8-SIG": "UTF-8"}
    files = get_files(files)
    for f in files:
        detect_outs, detect_errs = csys.run(f"chardetect {f}")
        detect_encoding = get_encoding(detect_outs)
        if detect_encoding is None:
            cmsg.echo(f"{f}: no encoding detected")
            continue
        detect_encoding = detect_encoding.upper()
        detect_encoding = (encoding_name_map[detect_encoding]
                           if detect_encoding in encoding_name_map else
                           detect_encoding)
        try:
            convert_outs, convert_errs = csys.run(
                f"iconv -f {detect_encoding} -t {target_encoding} {f}")
            temp_name = f"{f}.temp.{time.time()}"
            temp_fp = open(temp_name, "w")
            temp_fp.writelines(convert_outs)
            temp_fp.close()
            os.rename(f, temp_name)
            cmsg.echo(f"{f}: {detect_encoding} => {target_encoding}")
        except:
            cmsg.exception(
                f"failed to convert encoding for {f}: {detect_encoding} => {target_encoding}"
            )


def show_file_encoding(files):
    files = get_files(files)
    for f in files:
        detect_outs, detect_errs = csys.run(f"chardetect {f}")
        detect_encoding = get_encoding(detect_outs)
        cmsg.echo("%s: %s" % (f, detect_encoding))


@click.command()
@click.option("-s", "--show-encoding", is_flag=True, help="Show file encoding")
@click.option("-c",
              "--convert-encoding",
              required=False,
              type=click.Choice(
                  ["GB18030", "GB2312", "GBK", "UTF-8", "UTF-8-SIG", "ASCII"]),
              help="Convert file encoding to target encoding")
@click.option("-l",
              "--list",
              "list_arg",
              required=False,
              help="List files with specified type")
@click.option("-d",
              "--delete",
              "delete_arg",
              required=False,
              help="Delete files with specified type")
@click.argument("args", nargs=-1)
@click.option("--debug", is_flag=True, help="debug mode")
def vfile(show_encoding, convert_encoding, list_arg, delete_arg, args, debug):
    """
Recursive file operations.

Example:

\b
```
$ vfile -d log
remove => 2020-11-12-23_03_16.log
remove => 2020-11-12-23_07_30.log
remove => ./testcases/2020-11-12-23_12_51.log
remove => ./testcases/2020-11-12-23_30_07.log

$ vfile -s test.log
test.log: ascii
```
    """
    if debug:
        cmsg.debug(
            f"show_encoding:{show_encoding}, convert_encoding:{convert_encoding}, list_arg:{list_arg}, delete_arg:{delete_arg}, args:{args}, debug:{debug}"
        )
    if show_encoding:
        show_file_encoding(args)
    elif convert_encoding:
        convert_file_encoding(convert_encoding, args)
    elif list_arg:
        list_by_ftype(list_arg)
    elif delete_arg:
        delete_by_ftype(delete_arg)
    else:
        cmsg.unknown_option()


if __name__ == "__main__":
    vfile()
